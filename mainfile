import tkinter as tk
from tkinter import ttk

def tokenize(code, language):
    if language == 'GML':
        return re.findall(r'\w+|[=;]', code)
    elif language == 'GDscript':
        return re.findall(r'\w+|[=;]', code)
    else:
        raise ValueError("Unsupported language")

def parse(tokens, language):
    statements = []
    while tokens:
        if tokens[1] == '=':
            statements.append(('assign', tokens[0], tokens[2]))
            tokens = tokens[3:]
        elif tokens[0] == 'print' and language == 'GML':
            statements.append(('print', tokens[1]))
            tokens = tokens[3:]
        elif tokens[0] == 'print' and language == 'GDscript':
            statements.append(('print', tokens[1]))
            tokens = tokens[2:]
        else:
            raise ValueError("Unsupported statement")
    return statements

def convert(statements, target_language):
    output = []
    for stmt in statements:
        if stmt[0] == 'assign':
            if target_language == 'GML':
                output.append(f"{stmt[1]} = {stmt[2]};")
            elif target_language == 'GDscript':
                output.append(f"var {stmt[1]} = {stmt[2]}")
        elif stmt[0] == 'print':
            if target_language == 'GML':
                output.append(f"print({stmt[1]});")
            elif target_language == 'GDscript':
                output.append(f"print({stmt[1]})")
    return '\n'.join(output)

def convert_code(code, source_language, target_language):
    tokens = tokenize(code, source_language)
    statements = parse(tokens, source_language)
    return convert(statements, target_language)

def on_convert():
    code = input_text.get("1.0", "end-1c")
    conversion_type = conversion_var.get()
    
    if conversion_type == "GML to GDscript":
        converted_code = convert_code(code, 'GML', 'GDscript')
    elif conversion_type == "GDscript to GML":
        converted_code = convert_code(code, 'GDscript', 'GML')
    
    output_text.delete("1.0", "end")
    output_text.insert("1.0", converted_code)

# Set up the main application window
root = tk.Tk()
root.title("Code Converter")

# Set up the dropdown menu for conversion options
conversion_var = tk.StringVar()
conversion_options = ["GML to GDscript", "GDscript to GML"]
conversion_dropdown = ttk.Combobox(root, textvariable=conversion_var, values=conversion_options)
conversion_dropdown.current(0)  # Set default value
conversion_dropdown.pack(pady=10)

# Set up the text box for input code
input_label = tk.Label(root, text="Input Code:")
input_label.pack()
input_text = tk.Text(root, height=10, width=50)
input_text.pack(pady=10)

# Set up the button to trigger conversion
convert_button = tk.Button(root, text="Convert", command=on_convert)
convert_button.pack(pady=10)

# Set up the text box for output code
output_label = tk.Label(root, text="Output Code:")
output_label.pack()
output_text = tk.Text(root, height=10, width=50)
output_text.pack(pady=10)

# Start the main loop
root.mainloop()
